---
title: Building Blocks of Idiomatic Ruby
layout: post
categories: [roobs, idiomatic-ruby]
---

Idiomatic Ruby

Wikipedia defines "idiomatic" as, "being of a characteristic mode of expression in music or art." For me, writing Idiomatic Ruby has become code for "utilizing the unique capabilities of the language to write elegant code."

There are a number base concepts in Ruby, that once understood, help newcomers break through into writing more idiomatic Ruby. One is Ruby blocks and iterators. I'll speak to two others in this blog post:

* Everything in Ruby is an expression
* Everything, except nil (and well, false), is true

Everything in Ruby is an expression

In Ruby, everything is Ruby is an expression; this means that most anything that can return a value does. As a corollary to this, return statements are optional - the last evaluated value in a method will be returned automatically. 

With this in mind, take a look at the following code, which to a Rubyist, looks like it was written by a Java developer gone berserk:

# yep, this code has some problems.
def validate_element(element)
  if (@some_array.index(element) > -1 ) 
    puts ("Found it!")
    return true
  else
    puts ("Nope, sadface.")
    return false
  end
end

Knowing that return values are optional, we can easily make a change to simplify this code:

# A little better...
def validate_element(element)
  if (@some_array.index(element) > -1 ) 
    puts ("Found it!")
    true
  else
    puts ("Nope, not here.")
    false
  end
end

Everything, except nil, is true

In Ruby, everything is strictly coerced to true, except for nil, and well, false. As demonstration, run 'irb' and execute the following time-worn commands:

0 ? 1 : 0
[] ? 1 : 0
"" ? 1 :0
" " ? 1:0
"   " ? 1:0
nil ? 1:0
false ? 1:0

Ruby applies this principle in practice frequently in String, Hash, and Array 'finder' methods. Any of these methods will return nil if nothing is found in the receiver matching the requested object. This means the original code can be re-factored as:

# much better
def validate_element(element)
  @some_array.index(element) # will return nil if nothing found, which is interpreted as false
end

Granted, we've removed the diagnostics, but you'll agree that this is far more economical and concise.

A bit more

It's worth noting that true, false, and nil are not just keywords - they are also objects. Surprised? Nah, everything in Ruby is an Object, remember? Check out NilClass (http://www.ruby-doc.org/core-2.0.0/NilClass.html), TrueClass (http://www.ruby-doc.org/core-2.0.0/TrueClass.html), and FalseClass (http://www.ruby-doc.org/core-2.0.0/FalseClass.html).
